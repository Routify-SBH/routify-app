Here's a breakdown of how to create an optimized routine generator in Python using a genetic algorithm:

1. Define the Problem:

Activities: Identify the activities you want to schedule (work, sleep, exercise, etc.).
Constraints: Specify limitations like activity duration, preferred order, and rest periods.
Objective: Determine what "optimized" means. Is it maximizing free time, minimizing travel time, or prioritizing sleep?
2. Chromosome Representation:

Encode a routine as a chromosome. This could be:
Permutation: A list where the order represents the activity sequence.
Binary String: Each gene defines an activity or rest period.
3. Fitness Function:

This function evaluates how well a chromosome (routine) meets the objective.
Consider factors like:
Total free time based on activity durations and constraints.
Travel time between activities (if applicable).
Sleep duration.
Penalty points for violating constraints.
4. Genetic Algorithm Implementation:

Initialization: Generate a random population of chromosomes (routines).
Selection: Choose parents for creating offspring based on their fitness. You can use techniques like:
Roulette Wheel Selection: Assign a probability to each chromosome based on fitness (higher fitness, higher probability).
Tournament Selection: Randomly select a few chromosomes and pick the fittest as a parent.
Crossover: Combine genetic material from parents to create offspring. Popular methods include:
Single-Point Crossover: Choose a random point and swap genes after that point between parents.
Uniform Crossover: Randomly choose for each gene whether to inherit from parent 1 or parent 2.
Mutation: Introduce random changes in offspring chromosomes with a low probability to maintain diversity. This can involve swapping genes, inserting/deleting activities, or slightly modifying activity durations.
Replacement: Select a portion of the population (usually the least fit) to be replaced by the newly generated offspring.
5. Iteration and Termination:

Repeat steps 2-4 for a set number of generations or until the fitness reaches a desired threshold.
Monitor the progress of the best chromosome's fitness over generations.
Additional Considerations:

Activity Durations: You can represent durations as fixed values or allow for some variation in the chromosome.
User Input: Allow users to specify constraints, activity preferences, and weights for different objectives.
Visualization: Develop a way to visualize the generated routines for user evaluation.
Libraries:

Consider using libraries like deap (https://deap.readthedocs.io/) to simplify genetic algorithm implementation.
Learning Resources:

Simple Genetic Algorithm From Scratch in Python https://machinelearningmastery.com/machine-learning-with-python/
Genetic Algorithm Implementation in Python https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6
Remember: This is a general framework. You'll need to adapt it to your specific problem definition and desired functionalities.